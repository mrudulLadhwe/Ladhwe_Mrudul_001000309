/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryManRole;

import Business.Customer.Customer;
import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Order.Order;
import Business.Restaurant.Restaurant;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DeliveryManWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    Customer c;
    int orderId;
    Order o;
    int index;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
      
        
        populateTable();
        assignJButton.setEnabled(false);
        processJButton.setEnabled(false);
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        
        List<DeliveryMan> delList = business.getDeliveryManDirectory().getDeliveryManList();
        
        for(int i = 0; i < delList.size(); i++){
            if(delList.get(i).getName().equals(userAccount.getName())){
                for(int j = 0; j < delList.get(i).getOrderList().size(); j++){
                    System.out.println("id>>>>"+delList.get(i).getOrderList().get(j).getId());
                    model.addRow(new Object[]{
                    String.valueOf(delList.get(i).getOrderList().get(j).getId()),
                    delList.get(i).getOrderList().get(j).getComment(),
                    delList.get(i).getOrderList().get(j).getOrderItemList().get(0).getRestaurant().getRestaurentName(),
                    delList.get(i).getOrderList().get(j).getCustomer().getName(),
                    delList.get(i).getOrderList().get(j).getStatus()
                    });
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(234, 232, 232));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order Id", "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        workRequestJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workRequestJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 810, 300));

        assignJButton.setBackground(new java.awt.Color(51, 51, 51));
        assignJButton.setForeground(new java.awt.Color(255, 255, 255));
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 460, -1, -1));

        processJButton.setBackground(new java.awt.Color(51, 51, 51));
        processJButton.setForeground(new java.awt.Color(255, 255, 255));
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 460, 90, -1));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 60, -1, -1));

        jPanel1.setBackground(new java.awt.Color(97, 94, 94));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("My Home");
        jPanel1.add(jLabel1);

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1140, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        List<DeliveryMan> delList = business.getDeliveryManDirectory().getDeliveryManList();
        
        for(int i = 0; i < delList.size(); i++){
            if(delList.get(i).getName().equals(userAccount.getName())){
                for(int j = 0; j < delList.get(i).getOrderList().size(); j++){
                    if(j == selectedRow){
                        delList.get(i).getOrderList().get(j).setStatus("Order Pick Up");
                        orderId = delList.get(i).getOrderList().get(j).getId();
                        if(selectedRow >= 0){
                            model.setValueAt(delList.get(i).getOrderList().get(j).getStatus(), selectedRow, 4);
                        }
                    }
                }
            }
        }
        
        for(int i = 0; i < business.getOrderDirectory().getAllOrders().size(); i++){
            if(business.getOrderDirectory().getAllOrders().get(i).getId() == orderId){
                business.getOrderDirectory().getAllOrders().get(i).setStatus("Order Pick Up");
                c = business.getOrderDirectory().getAllOrders().get(i).getCustomer();
                for(int j = 0; j < c.getAllOrders().size(); j++){
                    if(c.getAllOrders().get(j).getId() == orderId){
                        c.getAllOrders().get(j).setStatus("Order Pick Up");
                    }
                }
            }
        }
        
        for(int i = 0; i < business.getOrderDirectory().getAllOrders().size(); i++){
            if(business.getOrderDirectory().getAllOrders().get(i).getId() == orderId){
                Restaurant res = business.getOrderDirectory().getAllOrders().get(i).getOrderItemList().get(0).getRestaurant();
                for(int j = 0; j < res.getAllOrders().size(); j++){
                    if(res.getAllOrders().get(j).getId() == orderId){
                        res.getAllOrders().get(j).setStatus("Order Pick Up");
                    }
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, "Order Picked Up!!");
       
//        
//        if (selectedRow < 0){
//            return;
//        }
//        
//        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
//        request.setReceiver(userAccount);
//        request.setStatus("Pending");
//        populateTable();
        
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
        
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        List<DeliveryMan> delList = business.getDeliveryManDirectory().getDeliveryManList();
        
        for(int i = 0; i < delList.size(); i++){
            if(delList.get(i).getName().equals(userAccount.getName())){
                for(int j = 0; j < delList.get(i).getOrderList().size(); j++){
                    if(j == selectedRow){
                        orderId = delList.get(i).getOrderList().get(j).getId();
                        delList.get(i).getOrderList().remove(j);
                        model.removeRow(selectedRow);
                    }
                }
            }
        }
        
        for(int i = 0; i < business.getOrderDirectory().getAllOrders().size(); i++){
            if(business.getOrderDirectory().getAllOrders().get(i).getId() == orderId){
                business.getOrderDirectory().getAllOrders().get(i).setStatus("Delivered");
                c = business.getOrderDirectory().getAllOrders().get(i).getCustomer();
                for(int j = 0; j < c.getAllOrders().size(); j++){
                    if(c.getAllOrders().get(j).getId() == orderId){
                        c.getAllOrders().get(j).setStatus("Delivered");
                    }
                }
            }
        }
        
        for(int i = 0; i < business.getOrderDirectory().getAllOrders().size(); i++){
            if(business.getOrderDirectory().getAllOrders().get(i).getId() == orderId){
                Restaurant res = business.getOrderDirectory().getAllOrders().get(i).getOrderItemList().get(0).getRestaurant();
                for(int j = 0; j < res.getAllOrders().size(); j++){
                    if(res.getAllOrders().get(j).getId() == orderId){
                        res.getAllOrders().get(j).setStatus("Delivered");
                    }
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, "Order Completed!!");
//        
//        if (selectedRow < 0){
//            return;
//        }
//        
//        LabTestWorkRequest request = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
//     
//        request.setStatus("Processing");
//        
//       ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, userAccount, business, o.getStatus());
//       userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
//       CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//       layout.next(userProcessContainer);
        
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void workRequestJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workRequestJTableMouseClicked
        // TODO add your handling code here:
        boolean flag = false;
        index = workRequestJTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        orderId = Integer.parseInt(model.getValueAt(index, 0).toString());
        
        List<Order> orderslist = business.getOrderDirectory().getAllOrders();
        for(int i = 0; i < orderslist.size(); i++){
            if(orderslist.get(i).getId() == orderId){
                String orderStatus = orderslist.get(i).getStatus();
                if(orderStatus.equals("Preparing Food")){
                    flag = true;
                    assignJButton.setEnabled(true);
                }else if(orderStatus.equals("Order Pick Up")){
                    processJButton.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_workRequestJTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
